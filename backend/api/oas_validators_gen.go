// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s AddressPostcode) Validate() error {
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    0,
		MaxLengthSet: false,
		Email:        false,
		Hostname:     false,
		Regex:        regexMap["^\\d{6}$"],
	}).Validate(string(s)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}
func (s PostcodesBySettlementGetResponse) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if elem == nil {
				return errors.New("nil is invalid value")
			}
			var failures []validate.FieldError
			for i, elem := range elem {
				if err := func() error {
					if err := elem.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					failures = append(failures, validate.FieldError{
						Name:  fmt.Sprintf("[%d]", i),
						Error: err,
					})
				}
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SendingGetResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.Stages == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Stages {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "stages",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SendingStage) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Name.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Postcode.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postcode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SendingStageName) Validate() error {
	switch s {
	case "Принято в отделении связи":
		return nil
	case "Покинуло место приема":
		return nil
	case "Прибыло в сортировочный центр":
		return nil
	case "Покинуло сортировочный центр":
		return nil
	case "Прибыло в место вручения":
		return nil
	case "Вручено адресату":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SendingStatus) Validate() error {
	switch s {
	case "В пути":
		return nil
	case "Доставлено":
		return nil
	case "Утеряно":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SendingType) Validate() error {
	switch s {
	case "Письмо":
		return nil
	case "Посылка":
		return nil
	case "Бандероль":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
