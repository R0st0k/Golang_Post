// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// SendingFilterGetParams is parameters of GET /sending_filter operation.
type SendingFilterGetParams struct {
	// Current page.
	Page Page
	// The number of items displayed on the page.
	ElemsOnPage ElementsOnPage
	// Sending filter.
	Filter SendingFilter
	// Sending sort.
	Sort SendingSort
}

func unpackSendingFilterGetParams(packed map[string]any) (params SendingFilterGetParams) {
	params.Page = packed["page"].(Page)
	params.ElemsOnPage = packed["elems_on_page"].(ElementsOnPage)
	params.Filter = packed["filter"].(SendingFilter)
	params.Sort = packed["sort"].(SendingSort)
	return params
}

func decodeSendingFilterGetParams(args [0]string, r *http.Request) (params SendingFilterGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page = Page(paramsDotPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: page: parse")
			}
			if err := func() error {
				if err := params.Page.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: page: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: elems_on_page.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "elems_on_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotElemsOnPageVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotElemsOnPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ElemsOnPage = ElementsOnPage(paramsDotElemsOnPageVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: elems_on_page: parse")
			}
			if err := func() error {
				if err := params.ElemsOnPage.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: elems_on_page: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: filter.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filter",
			Style:   uri.QueryStyleForm,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{"order_id", false}, {"type", false}, {"status", false}, {"date_start", false}, {"date_finish", false}, {"sender_settlement", false}, {"receiver_settlement", false}, {"length", false}, {"width", false}, {"height", false}, {"weight", false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return params.Filter.DecodeURI(d)
			}); err != nil {
				return params, errors.Wrap(err, "query: filter: parse")
			}
			if err := func() error {
				if err := params.Filter.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: filter: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	// Decode query: sort.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort",
			Style:   uri.QueryStyleForm,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{"sort_type", false}, {"sort_field", false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return params.Sort.DecodeURI(d)
			}); err != nil {
				return params, errors.Wrap(err, "query: sort: parse")
			}
			if err := func() error {
				if err := params.Sort.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sort: invalid")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	return params, nil
}

// SendingGetParams is parameters of GET /sending operation.
type SendingGetParams struct {
	// ID of sending.
	OrderID SendingOrderID
}

func unpackSendingGetParams(packed map[string]any) (params SendingGetParams) {
	params.OrderID = packed["order_id"].(SendingOrderID)
	return params
}

func decodeSendingGetParams(args [0]string, r *http.Request) (params SendingGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: order_id.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotOrderIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.OrderID = SendingOrderID(paramsDotOrderIDVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: order_id: parse")
			}
		} else {
			return params, errors.Wrap(err, "query")
		}
	}
	return params, nil
}
