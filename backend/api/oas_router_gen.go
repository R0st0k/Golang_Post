// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"strings"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'd': // Prefix: "data_"
				if l := len("data_"); len(elem) >= l && elem[0:l] == "data_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "export_sending"
					if l := len("export_sending"); len(elem) >= l && elem[0:l] == "export_sending" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleDataExportSendingGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'i': // Prefix: "import_sending"
					if l := len("import_sending"); len(elem) >= l && elem[0:l] == "import_sending" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleDataImportSendingPostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 'e': // Prefix: "employee_filter"
				if l := len("employee_filter"); len(elem) >= l && elem[0:l] == "employee_filter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleEmployeeFilterGetRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'p': // Prefix: "postcodes_by_settlement"
				if l := len("postcodes_by_settlement"); len(elem) >= l && elem[0:l] == "postcodes_by_settlement" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handlePostcodesBySettlementGetRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 's': // Prefix: "sending"
				if l := len("sending"); len(elem) >= l && elem[0:l] == "sending" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleSendingGetRequest([0]string{}, w, r)
					case "POST":
						s.handleSendingPostRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '_': // Prefix: "_"
					if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "filter"
						if l := len("filter"); len(elem) >= l && elem[0:l] == "filter" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleSendingFilterGetRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 's': // Prefix: "statistics"
						if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleSendingStatisticsGetRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [0]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'd': // Prefix: "data_"
				if l := len("data_"); len(elem) >= l && elem[0:l] == "data_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "export_sending"
					if l := len("export_sending"); len(elem) >= l && elem[0:l] == "export_sending" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: DataExportSendingGet
							r.name = "DataExportSendingGet"
							r.operationID = ""
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'i': // Prefix: "import_sending"
					if l := len("import_sending"); len(elem) >= l && elem[0:l] == "import_sending" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: DataImportSendingPost
							r.name = "DataImportSendingPost"
							r.operationID = ""
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'e': // Prefix: "employee_filter"
				if l := len("employee_filter"); len(elem) >= l && elem[0:l] == "employee_filter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: EmployeeFilterGet
						r.name = "EmployeeFilterGet"
						r.operationID = ""
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'p': // Prefix: "postcodes_by_settlement"
				if l := len("postcodes_by_settlement"); len(elem) >= l && elem[0:l] == "postcodes_by_settlement" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: PostcodesBySettlementGet
						r.name = "PostcodesBySettlementGet"
						r.operationID = ""
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 's': // Prefix: "sending"
				if l := len("sending"); len(elem) >= l && elem[0:l] == "sending" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "SendingGet"
						r.operationID = ""
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "SendingPost"
						r.operationID = ""
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '_': // Prefix: "_"
					if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "filter"
						if l := len("filter"); len(elem) >= l && elem[0:l] == "filter" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: SendingFilterGet
								r.name = "SendingFilterGet"
								r.operationID = ""
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "statistics"
						if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: SendingStatisticsGet
								r.name = "SendingStatisticsGet"
								r.operationID = ""
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
